
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .
//= require codemirror
//= require codemirror/modes/ruby
//= require codemirror/modes/clike

var javaProgram =
"import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.LinkedList;\n\tclass Main {\n\t\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tWorld world = new World();\n\t\t\tPlayer player1 = new Player();\n\t\t\tDealer dealer = new Dealer();\n\t\t\tdealer.dealCards();\n\t\t\tworld.hitOrStay(dealer, player1);\n\t\t\tworld.dealerHit(dealer);\n\t\t\tworld.determineWinners(dealer, player1);\n\t\t}\n\t\tSystem.out.println(\"ties percantage: \" + (World.ties / World.games) * 100);\n\t\tSystem.out.println(\"wins percentage: \" + (World.wins / World.games) * 100);\n\t\tSystem.out.println(\"losses percentage: \" + (World.losses / World.games) * 100);\n\t\tSystem.out.println(\"errors \" + World.errors);\n\t\tSystem.out.println(\"games \" + World.games);\n\n\t\t}\n\t}\n\tclass World {\n\tpublic static double ties;\n\tpublic static double wins;\n\tpublic static double losses;\n\tpublic static double errors;\n\tpublic static double games;\n\npublic void hitOrStay(Dealer dealer, Player player) {\n\n\t\tdo {\n\t\t\tplayer.calcTotal();\n\t\t\tif (player.calcTotal() < 11) {\n\n\t\t\t\tplayer.hit(dealer);\n\t\t\t} else if ((player.calcTotal() > 10 && player.calcTotal() < 17)\n\t\t\t\t\t&& (dealer.firstCard.getValue() < 12 && dealer.firstCard.getValue() > 6)) {\n\t\t\t\tplayer.hit(dealer);\n\t\t\t} else if ((player.calcTotal() > 10 && player.calcTotal() < 17)\n\t\t\t\t\t&& (dealer.firstCard.value < 7 && dealer.firstCard.value > 1)){\n\t\t\t\tbreak;\n\t\t\t} else{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}while(player.calcTotal() < 17);\n\t}\n\n\tpublic void dealerHit(Dealer dealer) {\n\t\t// System.out.println(dealer.calcTotal());\n\t\tif (dealer.calcTotal() < 17) {\n\t\t\tdo {\n\t\t\t\tdealer.hit();\n\t\t\t} while (dealer.calcTotal() < 17);\n\t\t}\n\t}\n\n\tpublic void determineWinners(Dealer dealer, Player player) {\n\t\t// for (Player player : Player.players) {\n\t\tString outcome = player.determineWin(dealer);\n\t\tswitch (outcome) {\n\t\tcase \"tie\":\n\t\t\tWorld.ties++;\n\t\t\tbreak;\n\t\tcase \"error\":\n\t\t\tWorld.errors++;\n\t\t\tbreak;\n\t\tcase \"true\":\n\t\t\tWorld.wins++;\n\t\t\tbreak;\n\t\tcase \"false\":\n\t\t\tWorld.losses++;\n\t\t\tbreak;\n\t\t}\n\n\t\t// }\n\t\tWorld.games++;\n\n\t}\n}\n\n class Card {\n\tpublic String rank;\n\tprivate String suit;\n\tpublic int value;\n\n\tpublic Card(String rank, String suit) {\n\t\tthis.rank = rank;\n\t\tthis.suit = suit;\n\t\tthis.value = getValue();\n\t}\n\n\tpublic String getRank() {\n\t\treturn this.rank;\n\n\t}\n\n\tpublic String getSuit() {\n\t\treturn this.suit;\n\t}\n\n\tpublic int getValue() {\n\n\t\tif (this.rank == \"A\") {\n\t\t\tvalue = 11;\n\t\t} else if (this.rank == \"K\" || this.rank == \"Q\" || this.rank == \"J\" || this.rank == \"10\") {\n\t\t\tvalue = 10;\n\t\t} else if(this.rank == \"A1\"){\n\t\t\tvalue = 1;\n\t\t}\n\t\telse {\n\t\t\tint rank = Integer.parseInt(this.rank);\n\t\t\tfor (int i = 2; i < 10; i++) {\n\t\t\t\tif (rank == i){\n\t\t\t\t\tvalue = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\n\t}\n}\nclass Dealer extends PlayerDealer {\n\tpublic String name;\n\tpublic Deck deck;\n\tpublic int total;\n\tpublic List<Card> cardsInHand;\n\n\tpublic Dealer() {\n\t\tthis.deck = new Deck();\n\n\t}\n\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\tpublic Deck getDeck() {\n\t\treturn this.deck;\n\t}\n\n\tpublic void dealCards() {\n\t\tthis.cardsInHand = new ArrayList<Card>();\n\t\tfor (Player player : Player.players) {\n\t\t\tplayer.cardsInHand = new ArrayList<Card>();\n\t\t\tplayer.cardsInHand = player.getHand(dealCard(), dealCard());\n\n\t\t}\n\t\tthis.cardsInHand = this.getHand(dealCard(), dealCard());\n\t}\n\n\tpublic Card dealCard() {\n\t\tRandom rand = new Random();\n//\t\tSystem.out.println(this.deck.cards.size() - 1);\n\t\tif(this.deck.cards.size() < 2){\n\t\t\tthis.deck = new Deck();\n\t\t}\n\t\tint n = rand.nextInt(this.deck.cards.size() - 1);\n\t\tCard card = this.deck.cards.get(n);\n\t\tthis.deck.cards.remove(n);\n\t\treturn card;\n\t}\n\tpublic void hit(){\n\t\tthis.cardsInHand.add(this.dealCard());\n\t\tthis.calcTotal();\n\n\t}\n\n}\n class Deck\t{\n\tpublic List<Card> cards;\n\tpublic Deck() {\n\t\tList<Card> cards = new ArrayList<Card>(100000);\n\t\tString[] suits = {\"Spades\", \"Hearts\", \"Diamonds\", \"Clubs\"};\n\t\tString[] ranks = {\"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"};\n\t\tfor(int i = 0; i < ranks.length; i++) {\n\t\t\tfor(String suit: suits) {\n\t\t\t\tCard card1 = new Card(ranks[i], suit);\n\t\t\t\tcards.add(card1);\n\t\t\t}\n\t\t}\n\t\tthis.cards = cards;\n\n\t}\n\tpublic List<Card> cards(){\n\t\treturn this.cards;\n\n\t}\n}\n class Player extends PlayerDealer{\n\tpublic static List<Player> players;\n\tpublic List<Card> cardsInHand;\n\n\tpublic Player(){\n\t\tif(players == null){\n\t\t\tplayers = new ArrayList();\n\t\t\t}\n\t\tplayers.add(this);\n\n\t}\n\tpublic void hit(Dealer dealer){\n\t\tthis.cardsInHand.add(dealer.dealCard());\n\t\tthis.calcTotal();\n\t}\n\tpublic String determineWin(Dealer dealer){\n\t\tString win = \"\";\n//\t\tSystem.out.println(this.calcTotal());\n//\t\tSystem.out.println(dealer.calcTotal());\n\t\tif(dealer.calcTotal() == this.calcTotal()){\n\t\t\t win = \"tie\";\n\t\t}else if((this.calcTotal() > 21)){\n\t\t\twin = \"false\";\n\t\t}else if((dealer.calcTotal() > 21) || this.calcTotal() > dealer.calcTotal()){\n\t\t\twin = \"true\";\n\t\t}else if((dealer.calcTotal() > this.calcTotal())){\n\t\t\twin = \"false\";\n\t\t}\n\t\telse{\n\t\t\twin = \"error\";\n\t\t}\n\n\t\treturn win;\n\t}\n\n}\n class PlayerDealer {\n\tpublic Card firstCard;\n\tpublic Card secondCard;\n\tpublic List<Card> cardsInHand;\n\tprivate int total;\n\n\tpublic List<Card> getHand(Card card1, Card card2) {\n\t\tfirstCard = card1;\n\t\tsecondCard = card2;\n\t\tthis.cardsInHand = new ArrayList<Card>();\n\t\tthis.cardsInHand.add(firstCard);\n\t\tthis.cardsInHand.add(secondCard);\n\t\treturn this.cardsInHand;\n\t}\n\n\tpublic int getTotal() {\n\t\treturn this.total;\n\t}\n\n\tpublic int calcTotal() {\n\t\tint total = 0;\n\n\t\tfor (Card card : this.cardsInHand) {\n\t\t\ttotal += card.getValue();\n\n\t\t\tif (total > 21) {\n\t\t\t\tfor (Card card1 : this.cardsInHand) {\n\t\t\t\t\tif (card1.rank == \"A\") {\n\n\t\t\t\t\t\tthis.cardsInHand.set(this.cardsInHand.indexOf(card1), new Card(\"A1\", \"Spades\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\ttotal -= total;\n\t\t\t\t\t\tfor (Card card2 : this.cardsInHand) {\n\t\t\t\t\t\t\ttotal += card2.getValue();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\treturn total;\n\t}\n\n\t// this.cardsInHand\n\n}";







var rubyProgram = "module PlayersDealers\n\n\tdef get_hand(card1, card2)\n\t\t@first_card = card1\n\t\t@second_card = card2\n\t\t@cards_in_hand = []\n\t\t@cards_in_hand << @first_card\n\t\t@cards_in_hand << @second_card\n\t\tself.total\n\tend\n\tdef calc_total\n\t\t@total = 0\n\t\tself.cards_in_hand.each{|card| @total += card.value}\n\t\tif @total > 21\n\t\t\tself.cards_in_hand.each do |card|\n\t\t\t\t# p self.name, card\n\t\t\t\tif card.rank == \"A\"\n\t\t\t\t\tcard.rank = \"A1\"\n\t\t\t\t\tcard.value = 1\n\t\t\t\t\t@total = 0\n\t\t\t\t\tself.cards_in_hand.each{|card| @total += card.value}\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tdef show_hand\n\t\tself.cards_in_hand.each do |card|\n\t\t\t# puts \"\#{self.name} has a \#{card.rank + card.suit}\"\n\t\tend\n\n\tend\n\tdef bust?(player)\n\t\tplayer.total > 21\n\tend\nend\n\nclass Card\n\tattr_accessor :rank, :value, :suit, :deck_of_cards\n\tdef initialize(rank, suit)\n\t\t@rank = rank\n\t\t@suit = suit\n\t\t@value = value\n\tend\n\n\tdef value\n\t\tPlayer.show_players.each do |player|\n\t\t\treturn 11 if @rank == \"A\"\n\t\t\treturn 10 if @rank == \"K\" || @rank == \"Q\" || @rank == \"J\" || @rank == \"10\"\n\t\t\treturn 1 if @rank == \"A1\"\n\t\t\t#for 2 though 9 if it equals its self then return that\n\t\t\ti = 2\n\t\t\twhile i < 10 do\n\t\t\t\treturn i if @rank == \"\#{i}\"\n\t\t\t\ti += 1\n\t\t\tend\n\t\tend\n\tend\nend\nclass Deck_of_cards\n\tattr_accessor :deck_of_cards, :array\n\tdef initialize\n\t\t@array = []\n\t\tsuits = %w{Spades Hearts Diamonds Clubs}\n\t\tranks = %w{A K Q J 10 9 8 7 6 5 4 3 2}\n\t\tranks.size.times do |i|\n\t\t\tsuits.each do |suit|\n\t\t\t\t@array << Card.new(ranks[i] , suit)\n\t\t\t\t@array\n\t\t\tend\n\t\tend\n\tend\nend\nclass Player\n\tinclude PlayersDealers\n\tattr_accessor :name, :amount_of_money, :cards_in_hand, :total, :bet_amount\n\t@@players = []\n\tdef initialize(name, amount_of_money)\n\t\t@name = name\n\t\t@amount_of_money = amount_of_money\n\t\t@@players << self\n\tend\n\t# #array for each player of all cards in their hand\n\t# def split\n\t#\n\t# end\n\t# def double_down(dealer)\n\t#\t self.hit(dealer)\n\t#\t self.bet_amount += self.bet_amount\n\t#\n\t# end\n\n\tdef self.show_players\n\t\t@@players\n\tend\n\tdef hit(dealer)\n\t\tself.cards_in_hand << dealer.deal_card\n\t\tself.calc_total\n\tend\n\n\tdef bet(bet_amount)\n\t\t@bet_amount = bet_amount\n\t\t@amount_of_money -= @bet_amount\n\tend\n\tdef win\n\t\t@amount_of_money += (2 * @bet_amount)\n\tend\n\tdef win?(dealer)\n\t\tif dealer.total == total\n\t\t\t\"tie\"\n\t\telsif self.total > 21\n\t\t\tfalse\n\t\telsif dealer.total > 21 || total > dealer.total\n\t\t\ttrue\n\t\telsif dealer.total > total\n\t\t\tfalse\n\t\telse\n\t\t\t\"error\"\n\t\tend\n\tend\n\tdef lose\n\t\t@amount_of_money\n\tend\n\tdef push?(dealer)\n\t\tself.total == dealer.total\n\tend\nend\n\n\nclass Dealer\n\tinclude PlayersDealers\n\tattr_accessor :name, :first_card, :second_card, :cards_in_hand, :total\n\tdef initialize(deck_of_cards, name)\n\t\t@deck_of_cards = deck_of_cards\n\t\t@name = name\n\tend\n\tdef hit\n\t\tself.cards_in_hand << self.deal_card\n\t\tself.calc_total\n\tend\n\tdef deal_cards\n\t\t@deck_of_cards.shuffle!\n\t\tPlayer.show_players.each do |player|\n\t\t\tplayer.get_hand(deal_card, deal_card)\n\t\tend\n\t\tself.get_hand(deal_card, deal_card)\n\tend\n\tdef deal_card\n\t\t@deck_of_cards.pop\n\tend\nend\n\nclass World\n\t@@statistics = Hash.new(0)\n\n\tattr_accessor :dealer, :response, :total\n\tdef initialize\n\t\t# puts \"How many players want to play blackjack?\"\n\t\t# number = gets.chomp.to_i\n\t\t# number.times {\n\t\t#\t puts \"player name?\"\n\t\t#\t player_name = gets.chomp\n\t\t#\t puts \"How much money does \#{player_name} have?\"\n\t\t#\t start_amount = gets.chomp.to_i\n\t\t#\t Player.new(player_name, start_amount)\n\t\t# }\n\t\tnew_deck = Deck_of_cards.new.array\n\t\t@dealer = Dealer.new(new_deck, \"dealer\")\n\n\tend\n\tdef self.stats\n\t\t@@statistics\n\tend\n\tdef deal\n\t\t@dealer.deal_cards\n\t\t@dealer.total\n\t\t# Player.show_players.each {|player| player.show_hand}\n\t\t# puts \"\#{@dealer.name} has \#{@dealer.first_card.rank} of \#{@dealer.first_card.suit}\"\n\tend\n\t# def prompt_to_hit(player)\n\t#\t puts \"\#{player.name} you total is \#{player.total}, do you (H)it or (S)tay?\"\n\t#\t @response = gets.chomp.downcase\n\t# end\n\t# def update_player_on_hand(player)\n\t#\t puts \"\#{player.name} your total is \#{player.total} and your cards are \#{player.cards_in_hand}\"\n\t# end\n\n\tdef hit_or_stay\n\t\t#creating an method that should play like me :)\n\t\t#All possibilities, Dealer can have 2-11, I can have 4-22\n\n\t\tPlayer.show_players.each do |player|\n\t\t\t# This gets rid of anytime I have 18, 19, 20, 21, or 22 so we gucci\n\t\t\tplayer.calc_total\n\t\t\twhile player.total < 17\n\t\t\t\t#always hit if I have under 10, no possible bust here\n\t\t\t\tif player.total < 11\n\t\t\t\t\tplayer.hit(@dealer)\n\t\t\t\tend\n\t\t\t\t#I have between 11 and 16, and the dealer is showing 7-11 then hit\n\t\t\t\tif (player.total > 10 && player.total < 17) && (@dealer.first_card.value < 12 && @dealer.first_card.value > 6)\n\t\t\t\t\tplayer.hit(@dealer)\n\t\t\t\tend\n\t\t\t\t#I have 11-15, when dealer is showing 2-6\n\t\t\t\tbreak\tif (player.total > 10 && player.total < 17) && (@dealer.first_card.value < 7 && @dealer.first_card.value > 1)\n\n\t\t\tend\n\t\tend\n\tend\n\n\n\n\n#This is code to play a normal game of black jack\n#\t Player.show_players.each do |player|\n#\t\t @response = \"h\"\n#\t\t @response == \"h\"\n#\t\t player.calc_total\n#\t\t @dealer.calc_total\n#\t\t while player.total < 21\n#\t\t\t prompt_to_hit(player)\n#\t\t\t if @response == \"h\"\n#\t\t\t\t player.hit(@dealer)\n#\t\t\t\t update_player_on_hand(player)\n#\t\t\t elsif @response == \"s\"\n#\t\t\t\t update_player_on_hand(player)\n#\t\t\t\t break\n#\t\t\t elsif @resonse == \"d\"\n#\t\t\t\t player.double_down\n#\t\t\t\t update_player_on_hand\n#\t\t\t\t break\n#\t\t\t end\n#\t\t end\n#\t end\n# end\ndef dealer_hit\n\t# puts \"Dealer has \#{@dealer.total}\"\n\t@dealer.calc_total\n\tuntil @dealer.total > 16 do\n\t\t@dealer.hit\n\tend\n\t# puts \"Dealer has \#{@dealer.total}\"\nend\ndef show_total_dealer\n\t# puts \"\#{@dealer.name} has a total of \#{@dealer.total}\"\nend\ndef determine_winners\n\tPlayer.show_players.each do |player|\n\t\toutcome = case player.win? @dealer\n\t\twhen \"tie\" then :ties\n\t\twhen \"error\" then :errors\n\t\twhen true then :wins\n\t\twhen false then :losses\n\t\tend\n\t\t@@statistics[outcome] += 1\n\tend\n\t@@statistics[:games] += 1\nend\nend\n\nzach = Player.new(\"zach\", 5000)\n\n# Player.new(\"craig\", 5000).bet(5000)\n# Player.new(\"austin\", 5000).bet(5000)\n# game1 = World.new\n# game1.deal\n# zach.show_hand\n# game1.hit_or_stay\n# zach.show_hand\n# game1.dealer_hit\n\n\n100.times do\n\tgame1 = World.new\n\tgame1.deal\n\tgame1.hit_or_stay\n\tgame1.dealer_hit\n\tgame1.determine_winners\nend\nputs \"Percent of wins = \#{World.stats[:wins].to_f/World.stats[:games] * 100}%\"\nputs \"Percent of ties = \#{World.stats[:ties].to_f/World.stats[:games] * 100}%\"\nputs \"Percent of losses = \#{World.stats[:losses].to_f/World.stats[:games] * 100}%\"\nputs \"Percent of errors = \#{World.stats[:errors].to_f/World.stats[:games] * 100}%\"";
